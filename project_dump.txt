


================================================================================
File: .\petrescue\urls.py
================================================================================

from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static

from users.views import (
    ProfileViewSet, PetReportViewSet, PetForAdoptionViewSet, NotificationViewSet, RegisterView
)
from users import urls as users_html_urls

from rest_framework.routers import DefaultRouter

api_router = DefaultRouter()
api_router.register(r'profiles', ProfileViewSet)
api_router.register(r'petreports', PetReportViewSet)
api_router.register(r'petsforadoption', PetForAdoptionViewSet)
api_router.register(r'notifications', NotificationViewSet)

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include(api_router.urls), name='api_root'), 
    path('api/register/', RegisterView.as_view(), name='api_register'),
    path('', include('users.urls')),
]

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)



================================================================================
File: .\users\models.py
================================================================================

from django.db import models
from django.contrib.auth.models import User

# This model extends Django's User to add the 'role' field.
class Profile(models.Model):
    ROLE_CHOICES = (('admin', 'Admin'), ('user', 'User'))
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    role = models.CharField(max_length=10, choices=ROLE_CHOICES, default='user')
    age = models.PositiveIntegerField(null=True, blank=True)
    city = models.CharField(max_length=100, null=True, blank=True)
    phone_number = models.CharField(max_length=20, null=True, blank=True)
    profile_picture = models.ImageField(default='profile_pics/default.png', upload_to='profile_pics/', null=True, blank=True)
    def __str__(self): return f"{self.user.username} Profile"

# This table handles both LOST and FOUND pet "incidents".
class PetReport(models.Model):
    REPORT_TYPE_CHOICES = (('Lost', 'I lost my pet'), ('Found', 'I found a pet'))
    STATUS_CHOICES = (('Open', 'Open'), ('Closed', 'Closed'))
    GENDER_CHOICES = (('Male', 'Male'), ('Female', 'Female'), ('Unknown', 'Unknown')) # Add gender choices here

    report_type = models.CharField(max_length=10, choices=REPORT_TYPE_CHOICES)
    reporter = models.ForeignKey(User, on_delete=models.CASCADE, related_name='pet_reports')

    # NEW FIELDS ADDED:
    name = models.CharField(max_length=100, blank=True, null=True, help_text="Pet's name (if known)") # Optional name
    age = models.PositiveIntegerField(null=True, blank=True, help_text="Pet's age in years (if known)") # Optional age
    gender = models.CharField(max_length=10, choices=GENDER_CHOICES, default='Unknown', help_text="Pet's gender") # Gender field

    pet_type = models.CharField(max_length=50, help_text="e.g., Dog, Cat, Bird")
    breed = models.CharField(max_length=100, blank=True, null=True)
    color = models.CharField(max_length=50)
    pet_image = models.ImageField(upload_to='pet_images/')
    location = models.CharField(max_length=255, help_text="Area where the pet was lost or found.")
    contact_info = models.CharField(max_length=255, help_text="Your phone or email for contact.")
    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='Open')
    date_reported = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        # Updated __str__ to include name if available
        pet_name = self.name if self.name else "Unnamed Pet"
        return f"{self.get_report_type_display()}: {pet_name} ({self.pet_type}) by {self.reporter.username}"

# This separate table is a catalog for pets available for ADOPTION.
class PetForAdoption(models.Model):
    GENDER_CHOICES = (('Male', 'Male'), ('Female', 'Female'), ('Unknown', 'Unknown'))
    ADOPTION_STATUS_CHOICES = (('Available', 'Available'), ('Pending', 'Adoption Pending'), ('Adopted', 'Adopted'))
    name = models.CharField(max_length=100)
    age = models.PositiveIntegerField(help_text="Age in years.")
    gender = models.CharField(max_length=10, choices=GENDER_CHOICES, default='Unknown')
    pet_type = models.CharField(max_length=50)
    breed = models.CharField(max_length=100, blank=True, null=True)
    color = models.CharField(max_length=50)
    image = models.ImageField(upload_to='adoption_images/')
    description = models.TextField(help_text="Describe the pet's personality, story, and needs.")
    lister = models.ForeignKey(User, on_delete=models.CASCADE, related_name='adoption_listings')
    status = models.CharField(max_length=10, choices=ADOPTION_STATUS_CHOICES, default='Available')
    date_listed = models.DateTimeField(auto_now_add=True)
    def __str__(self): return f"{self.name} ({self.pet_type}) - {self.get_status_display()}"

# This table handles notifications from the system/admins to users.
class Notification(models.Model):
    recipient = models.ForeignKey(User, on_delete=models.CASCADE, related_name='notifications')
    pet_report = models.ForeignKey(PetReport, on_delete=models.CASCADE, null=True, blank=True)
    message = models.TextField()
    is_read = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)
    def __str__(self): return f"Notification for {self.recipient.username}: {self.message[:30]}..."





================================================================================
File: .\users\urls.py
================================================================================

# users/urls.py
from django.urls import path
from .views import (
   login_view, logout_view, register_view,
    pets_list_view, pet_detail_view, about_view, contact_view, dashboard_view, create_pet_report_view, # Make sure this is imported
    pet_report_detail_view
)

app_name = 'users' 

urlpatterns = [
    # --- HTML Rendering URLs ---
    path('', login_view, name='login'), 
    path('logout/', logout_view, name='logout'),
    path('register/', register_view, name='register'),
    path('pets/', pets_list_view, name='pets_list'),
    path('pets/<int:pet_id>/', pet_detail_view, name='pet_detail'),
    path('about/', about_view, name='about'),
    path('contact/', contact_view, name='contact'),
    path('dashboard/', dashboard_view, name='dashboard'),
    path('report/pet/<str:report_type>/', create_pet_report_view, name='create_pet_report'),
    path('report/<int:report_id>/', pet_report_detail_view, name='pet_report_detail'), 
]


================================================================================
File: .\users\views.py
================================================================================

# users/views.py
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth import authenticate, login as auth_login, logout as auth_logout
from django.contrib.auth.decorators import login_required
from django.contrib.auth.models import User
from django import forms
from django.urls import reverse
from django.contrib import messages

from .models import Profile, PetReport, PetForAdoption, Notification
from .serializers import ProfileSerializer, PetReportSerializer, PetForAdoptionSerializer, NotificationSerializer, UserSerializer
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import viewsets, status
from rest_framework.permissions import AllowAny, IsAuthenticated, IsAdminUser

# --- API ViewSets ---
class ProfileViewSet(viewsets.ModelViewSet):
    queryset = Profile.objects.all()
    serializer_class = ProfileSerializer
    # permission_classes = [IsAuthenticated] # Uncomment if API access should be restricted

class PetReportViewSet(viewsets.ModelViewSet):
    queryset = PetReport.objects.all()
    serializer_class = PetReportSerializer
    # permission_classes = [IsAuthenticated]

class PetForAdoptionViewSet(viewsets.ModelViewSet):
    queryset = PetForAdoption.objects.all()
    serializer_class = PetForAdoptionSerializer
    # permission_classes = [IsAuthenticated]

class NotificationViewSet(viewsets.ModelViewSet):
    queryset = Notification.objects.all()
    serializer_class = NotificationSerializer
    # permission_classes = [IsAuthenticated]

# --- API View for Registration ---
class RegisterView(APIView):
    permission_classes = [AllowAny]
    def post(self, request):
        username = request.data.get('username')
        email = request.data.get('email')
        password = request.data.get('password')

        if not username or not password or not email:
            return Response({'error': 'Username, email, and password are required.'}, status=status.HTTP_400_BAD_REQUEST)
        if User.objects.filter(username=username).exists():
            return Response({'error': 'Username already exists.'}, status=status.HTTP_400_BAD_REQUEST)
        if User.objects.filter(email=email).exists():
            return Response({'error': 'Email already exists.'}, status=status.HTTP_400_BAD_REQUEST)

        user = User.objects.create_user(username=username, email=email, password=password)
        Profile.objects.create(user=user) # Creates profile with default values
        return Response(UserSerializer(user).data, status=status.HTTP_201_CREATED)


# --- HTML Rendering Views ---

# Login View
def login_view(request):
    if request.method == 'POST':
        form_username = request.POST.get('username')
        form_password = request.POST.get('password')

        user = authenticate(request, username=form_username, password=form_password)

        if user is not None:
            auth_login(request, user)
            messages.success(request, "Welcome back! You are logged in.")
            # Redirect to the dashboard after successful login
            return redirect('users:dashboard')
        else:
            # Authentication failed
            messages.error(request, "Invalid username or password. Please try again.")
            return render(request, 'users/login.html') # Re-render login page with error message
    else:
        # GET request: show the login form
        # If user is already authenticated, redirect them away from the login page.
        if request.user.is_authenticated:
            return redirect('users:dashboard') # Redirect logged-in users to dashboard
        return render(request, 'users/login.html')

# Logout View
def logout_view(request):
    auth_logout(request)
    messages.info(request, "You have been logged out.")
    return redirect('users:login') # Redirect to login after logout

# Registration Form
class RegistrationForm(forms.Form):
    username = forms.CharField(max_length=150, required=True, widget=forms.TextInput(attrs={'id': 'id_username', 'class': 'form-input'}))
    email = forms.EmailField(required=True, widget=forms.EmailInput(attrs={'id': 'id_email', 'class': 'form-input'}))
    first_name = forms.CharField(max_length=100, required=False, widget=forms.TextInput(attrs={'id': 'id_first_name', 'class': 'form-input'}))
    age = forms.IntegerField(min_value=0, required=False, widget=forms.NumberInput(attrs={'id': 'id_age', 'class': 'form-input'}))
    city = forms.CharField(max_length=100, required=False, widget=forms.TextInput(attrs={'id': 'id_city', 'class': 'form-input'}))
    phone_number = forms.CharField(max_length=20, required=False, widget=forms.TextInput(attrs={'id': 'id_phone_number', 'class': 'form-input'}))
    password = forms.CharField(widget=forms.PasswordInput(attrs={'id': 'id_password1', 'class': 'form-input'}))
    password2 = forms.CharField(widget=forms.PasswordInput(attrs={'id': 'id_password2', 'class': 'form-input'}), label="Confirm Password")

    def clean_password(self):
        password = self.cleaned_data.get("password")
        if password:
            if len(password) < 8: raise forms.ValidationError("Password must contain at least 8 characters.")
            if not any(c.islower() for c in password): raise forms.ValidationError("Password must contain at least one lowercase letter.")
            if not any(c.isupper() for c in password): raise forms.ValidationError("Password must contain at least one uppercase letter.")
            if not any(c.isdigit() for c in password): raise forms.ValidationError("Password must contain at least one number.")
            if not any(not c.isalnum() for c in password): raise forms.ValidationError("Password must contain at least one special character.")
        return password

    def clean_password2(self):
        password = self.cleaned_data.get("password")
        password2 = self.cleaned_data.get("password2")
        if password and password2 and password != password2:
            raise forms.ValidationError("Passwords do not match.")
        return password

    def clean_username(self):
        username = self.cleaned_data.get('username')
        if User.objects.filter(username=username).exists():
            raise forms.ValidationError("Username already exists.")
        return username

    def clean_email(self):
        email = self.cleaned_data.get('email')
        if User.objects.filter(email=email).exists():
            raise forms.ValidationError("Email already exists.")
        return email

# Registration View (Modified for correct form handling and redirection)
def register_view(request):
    form = RegistrationForm() # Initialize form for GET requests

    if request.method == 'POST':
        form = RegistrationForm(request.POST) # Use POST data to create the form instance
        if form.is_valid():
            user = User.objects.create_user(
                username=form.cleaned_data['username'],
                email=form.cleaned_data['email'],
                password=form.cleaned_data['password'],
                first_name=form.cleaned_data.get('first_name', ''),
            )
            Profile.objects.create(
                user=user,
                age=form.cleaned_data.get('age'),
                city=form.cleaned_data.get('city'),
                phone_number=form.cleaned_data.get('phone_number')
            )
            auth_login(request, user)
            messages.success(request, "🎉 Registration successful! Welcome to PawFinder.")
            # Redirect to the login page after successful registration and login
            return redirect('users:login') # Redirect to login page after registration
        # If form is not valid, 'form' still holds the invalid POST data and errors,
        # so the render at the end will display it correctly.

    # If GET request OR POST with invalid form, render the template with the form
    return render(request, 'users/register.html', {'form': form})


# Dashboard View (Modified to show available pets and action buttons)
@login_required
def dashboard_view(request):
    # Fetch available pets for adoption
    available_pets = PetForAdoption.objects.filter(status='Available')

    context = {
        'available_pets': available_pets
        # We can also fetch user profile and reports here if needed for dashboard
    }
    return render(request, 'users/dashboard.html', context)


# New View for Reporting Lost/Found Pet
# This view will handle both 'Lost' and 'Found' report types.
def create_pet_report_view(request, report_type):
    # Ensure user is logged in
    if not request.user.is_authenticated:
        messages.error(request, "You need to be logged in to report a pet.")
        return redirect('users:login')

    if request.method == 'POST':
        form = PetReportForm(request.POST, request.FILES) # Pass POST data and FILES
        if form.is_valid():
            # Save the PetReport to the database
            pet_report = PetReport.objects.create(
                report_type=report_type, # 'Lost' or 'Found' from the URL
                reporter=request.user,   # The currently logged-in user
                pet_type=form.cleaned_data['pet_type'],
                breed=form.cleaned_data.get('breed'), # Use .get for optional fields
                color=form.cleaned_data['color'],
                pet_image=form.cleaned_data['pet_image'], # Image is saved to MEDIA_ROOT
                location=form.cleaned_data['location'],
                contact_info=form.cleaned_data['contact_info'],
                age=form.cleaned_data.get('age'),
                # status defaults to 'Open' as defined in the model
            )
            messages.success(request, f"Your '{report_type}' pet report has been submitted successfully!")
            return redirect('users:dashboard') # Redirect to dashboard after successful submission
        # If form is not valid, 'form' will hold the errors for rendering.
    else:
        # GET request: Initialize an empty form
        form = PetReportForm()

    context = {
        'form': form,
        'report_type': report_type, # Pass to template for dynamic title/heading
    }
    return render(request, 'users/create_pet_report.html', context) # New template

# View to show a single pet report's details
@login_required # Protect this view
def pet_report_detail_view(request, report_id):
    try:
        report = PetReport.objects.get(pk=report_id)
        # Optional: Check if the logged-in user is the reporter of this report
        # if report.reporter != request.user:
        #     messages.error(request, "You do not have permission to view this report.")
        #     return redirect('users:dashboard')
    except PetReport.DoesNotExist:
        messages.error(request, "Report not found.")
        return redirect('users:dashboard')

    context = {
        'report': report
    }
    return render(request, 'users/pet_report_detail.html', context)

# --- Form for Reporting Lost/Found Pet ---
class PetReportForm(forms.Form):
    pet_type = forms.CharField(max_length=50, required=True, widget=forms.TextInput(attrs={'placeholder': 'e.g., Dog, Cat, Bird'}))
    breed = forms.CharField(max_length=100, required=False, widget=forms.TextInput(attrs={'placeholder': 'e.g., Labrador, Siamese'}))
    color = forms.CharField(max_length=50, required=True, widget=forms.TextInput(attrs={'placeholder': 'e.g., Brown, Black and White'}))
    pet_image = forms.ImageField(required=True)
    location = forms.CharField(max_length=255, required=True, widget=forms.TextInput(attrs={'placeholder': 'Area where the pet was lost or found'}))
    contact_info = forms.CharField(max_length=255, required=True, widget=forms.TextInput(attrs={'placeholder': 'Your phone or email'}))
    name = forms.CharField(max_length=100, required=False, widget=forms.TextInput(attrs={'placeholder': "Pet's name (if known)"}))
    age = forms.IntegerField(min_value=0, required=False, widget=forms.NumberInput(attrs={'placeholder': "Pet's age in years (if known)"}))
    gender = forms.ChoiceField(choices=PetReport.GENDER_CHOICES, required=False, widget=forms.Select(attrs={'placeholder': "Select Gender"}))

# --- Placeholder views for About, Contact, etc. ---
def about_view(request):
    return render(request, 'users/about.html')

def contact_view(request):
    return render(request, 'users/contact.html')

# Dashboard View (already modified to fetch available pets)
@login_required
def dashboard_view(request):
    # Fetch available pets for adoption
    available_pets = PetForAdoption.objects.filter(status='Available')

    context = {
        'available_pets': available_pets
        # We can also fetch user profile and reports here if needed for dashboard
    }
    return render(request, 'users/dashboard.html', context)

def pets_list_view(request):
    all_pets = PetForAdoption.objects.filter(status='Available')
    context = {
        'pets': all_pets
    }
    return render(request, 'users/pets_list.html', context)

@login_required # Protect this view
def pet_detail_view(request, report_id):
    # ... (implementation for pet_report_detail_view) ...
    pass # Placeholder for now





================================================================================
File: .\users\templates\users\create_pet_report.html
================================================================================

{# users/templates/users/create_pet_report.html #}
{% extends 'users/base.html' %}
{% load static %}

{% block title %}{{ report_type }} Pet Report{% endblock %}

{% block content %}
<section class="report-section">
    <div class="auth-box"> {# Reusing auth-box for form styling #}
        <h2 class="auth-title">{{ report_type }} Pet Report</h2>
        <p class="auth-subtitle">Help us reunite pets with their families!</p>

        {# IMPORTANT: enctype="multipart/form-data" is crucial for file uploads #}
        <form id="petReportForm" method="post" enctype="multipart/form-data" action="">
            {% csrf_token %}

            {# Display form errors #}
            {% if form.errors %}
                <div class="alert alert-danger">
                    {% for field in form %}
                        {% for error in field.errors %}
                            <p><strong>{{ field.label }}:</strong> {{ error }}</p>
                        {% endfor %}
                    {% endfor %}
                    {% for error in form.non_field_errors %}
                        <p><strong>Error:</strong> {{ error }}</p>
                    {% endfor %}
                </div>
            {% endif %}

            {# Form fields - NEW FIELDS ADDED #}
            <div class="form-group">
                <label for="id_name">Pet's Name (Optional):</label>
                <input type="text" id="id_name" name="name" value="{{ form.name.value|default:'' }}">
            </div>
            <div class="form-group">
                <label for="id_age">Age (Optional):</label>
                <input type="number" id="id_age" name="age" min="0" value="{{ form.age.value|default:'' }}">
            </div>
            <div class="form-group">
                <label for="id_gender">Gender:</label>
                {# Using select for dropdown based on choices #}
                <select id="id_gender" name="gender">
                    {% for value, display in form.gender.field.choices %}
                        <option value="{{ value }}" {% if form.gender.value == value %}selected{% endif %}>{{ display }}</option>
                    {% endfor %}
                </select>
            </div>

            {# Existing Fields #}
            <div class="form-group">
                <label for="id_pet_type">Pet Type:</label>
                <input type="text" id="id_pet_type" name="pet_type" value="{{ form.pet_type.value|default:'' }}" required>
            </div>
            <div class="form-group">
                <label for="id_breed">Breed (Optional):</label>
                <input type="text" id="id_breed" name="breed" value="{{ form.breed.value|default:'' }}">
            </div>
            <div class="form-group">
                <label for="id_color">Color:</label>
                <input type="text" id="id_color" name="color" value="{{ form.color.value|default:'' }}" required>
            </div>
            <div class="form-group">
                <label for="id_pet_image">Pet Image:</label>
                <input type="file" id="id_pet_image" name="pet_image" accept="image/*" required>
            </div>
            <div class="form-group">
                <label for="id_location">Location:</label>
                <input type="text" id="id_location" name="location" value="{{ form.location.value|default:'' }}" required>
                <small>e.g., "Central Park, NYC" or "Near Main Street and Elm Avenue"</small>
            </div>
            <div class="form-group">
                <label for="id_contact_info">Contact Info:</label>
                <input type="text" id="id_contact_info" name="contact_info" value="{{ form.contact_info.value|default:'' }}" required>
                <small>Your phone number or email address</small>
            </div>

            <button type="submit" class="btn btn-primary btn-full">Submit Report</button>
        </form>
    </div>
</section>
{% endblock %}


