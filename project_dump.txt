
================================================================================
File: .\dump_project.py
================================================================================

import os

# Set your project root (current folder)
project_root = "."

# Output file
output_file = "project_dump.txt"

# File extensions you want to include (to avoid collecting unnecessary stuff)
include_exts = [".py", ".html", ".css", ".js", ".json", ".txt", ".md"]

with open(output_file, "w", encoding="utf-8") as outfile:
    for root, dirs, files in os.walk(project_root):
        # Skip virtual environment folders and __pycache__
        if "venv" in dirs:
            dirs.remove("venv")
        if "__pycache__" in dirs:
            dirs.remove("__pycache__")

        for file in files:
            if any(file.endswith(ext) for ext in include_exts):
                filepath = os.path.join(root, file)
                try:
                    with open(filepath, "r", encoding="utf-8") as infile:
                        outfile.write(f"\n{'='*80}\n")
                        outfile.write(f"File: {filepath}\n")
                        outfile.write(f"{'='*80}\n\n")
                        outfile.write(infile.read())
                        outfile.write("\n\n")
                except Exception as e:
                    outfile.write(f"\n[Could not read {filepath}: {e}]\n")

print(f"âœ… All file contents have been saved to {output_file}")



================================================================================
File: .\manage.py
================================================================================

#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'petrescue.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()



================================================================================
File: .\project_dump.txt
================================================================================




================================================================================
File: .\requirements.txt
================================================================================


[Could not read .\requirements.txt: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte]

================================================================================
File: .\petrescue\asgi.py
================================================================================

"""
ASGI config for petrescue project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'petrescue.settings')

application = get_asgi_application()



================================================================================
File: .\petrescue\settings.py
================================================================================

"""
Django settings for petrescue project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os 
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-45j6)$4tek)sn#--qcqp#wwj22gcro_n-v+hy)xqg+2hj!1wy^'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'users.apps.UsersConfig', 
    "rest_framework",
    "corsheaders",
]

MIDDLEWARE = [
   'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'petrescue.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'petrescue.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'petrescue_db',
        'USER': 'root', 
        'PASSWORD': 'root', 
        'HOST': '127.0.0.1',
        'PORT': '3306',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Media files settings
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# STATIC_ROOT is important for deployment but not strictly for development server.
# If you are planning to deploy, you would uncomment this and run 'python manage.py collectstatic'.
# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



================================================================================
File: .\petrescue\urls.py
================================================================================

from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static

from users.views import (
    ProfileViewSet, PetReportViewSet, PetForAdoptionViewSet, NotificationViewSet, RegisterView
)
from users import urls as users_html_urls

from rest_framework.routers import DefaultRouter

api_router = DefaultRouter()
api_router.register(r'profiles', ProfileViewSet)
api_router.register(r'petreports', PetReportViewSet)
api_router.register(r'petsforadoption', PetForAdoptionViewSet)
api_router.register(r'notifications', NotificationViewSet)

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include(api_router.urls), name='api_root'), # Note: no namespace here on include
    path('api/register/', RegisterView.as_view(), name='api_register'),
    path('', include('users.urls')),
]

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)


================================================================================
File: .\petrescue\wsgi.py
================================================================================

"""
WSGI config for petrescue project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'petrescue.settings')

application = get_wsgi_application()



================================================================================
File: .\petrescue\__init__.py
================================================================================




================================================================================
File: .\static\css\style.css
================================================================================

/* Basic Reset */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Quicksand', sans-serif; /* Cute and readable font */
    line-height: 1.6;
    color: #333;
    background-color: #f9f9f9;
}

/* Typography */
h1, h2, h3 {
    font-family: 'Pacifico', cursive; /* Cute title font */
    color: #e67e22; /* Warm orange */
}

.site-title {
    font-size: 2.5em;
    margin-left: 10px;
}

.section-title {
    text-align: center;
    margin-bottom: 30px;
    font-size: 2em;
}

/* Layout & Containers */
.container {
    width: 90%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px 0;
}

/* Header */
.site-header {
    background-color: #ffffff;
    padding: 10px 0;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}

.site-header .container {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.logo {
    display: flex;
    align-items: center;
    cursor: pointer;
}

.logo-img {
    height: 40px;
    width: auto;
}

.site-header nav ul {
    list-style: none;
    display: flex;
}

.site-header nav li {
    margin-left: 25px;
}

.site-header nav a {
    text-decoration: none;
    color: #555;
    font-weight: bold;
    font-size: 1.1em;
    transition: color 0.3s ease;
}

.site-header nav a:hover {
    color: #e67e22;
}

/* Main Content */
main {
    padding-top: 30px;
    min-height: 70vh; /* Ensure footer stays at bottom */
}

/* Hero Section */
.hero-section {
    background-color: #ffddc1; /* Light peach */
    padding: 60px 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-radius: 15px;
    margin-bottom: 40px;
    overflow: hidden; /* For rounded corners of image */
}

.hero-content {
    flex: 1;
    padding-right: 30px;
}

.hero-content h2 {
    font-size: 3em;
    margin-bottom: 20px;
    color: #7d3cff; /* Purple */
}

.hero-content p {
    font-size: 1.3em;
    margin-bottom: 30px;
    color: #555;
}

.hero-image img {
    max-width: 100%;
    height: 350px; /* Fixed height for consistent look */
    border-radius: 15px;
    object-fit: cover; /* Ensure image covers the area nicely */
}

.hero-actions {
    display: flex;
    gap: 20px;
}

/* Buttons */
.btn {
    display: inline-block;
    padding: 12px 25px;
    border: none;
    border-radius: 8px;
    text-decoration: none;
    font-weight: bold;
    cursor: pointer;
    transition: background-color 0.3s ease, transform 0.2s ease;
    font-size: 1.1em;
}

.btn-primary {
    background-color: #7d3cff; /* Purple */
    color: white;
}

.btn-primary:hover {
    background-color: #6c33cc;
    transform: translateY(-2px);
}

.btn-secondary {
    background-color: #ffddc1; /* Light peach */
    color: #e67e22; /* Warm orange */
    border: 2px solid #e67e22;
}

.btn-secondary:hover {
    background-color: #ffe8d7;
    border-color: #d6721f;
    transform: translateY(-2px);
}

.btn-small {
    padding: 8px 15px;
    font-size: 0.9em;
}

.btn-full {
    width: 100%;
}

/* Featured Pets Section */
.featured-pets-section {
    margin-bottom: 50px;
}

.pet-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 30px;
}

.pet-card {
    background-color: white;
    border-radius: 15px;
    box-shadow: 0 4px 10px rgba(0,0,0,0.08);
    overflow: hidden;
    text-align: center;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    display: flex;
    flex-direction: column;
}

.pet-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 20px rgba(0,0,0,0.12);
}

.pet-card-img {
    width: 100%;
    height: 200px; /* Fixed height for images */
    object-fit: cover; /* Cover the area without distortion */
}

.pet-card-info {
    padding: 15px;
    flex-grow: 1; /* Allows this div to take up available space */
    display: flex;
    flex-direction: column;
    justify-content: space-between; /* Pushes button to bottom */
}

.pet-card-info h3 {
    font-family: 'Pacifico', cursive;
    color: #333;
    margin-bottom: 10px;
    font-size: 1.6em;
}

.pet-card-info p {
    margin-bottom: 8px;
    color: #555;
}

.pet-card-info .btn-small {
    margin-top: 15px; /* Space above button */
}

/* About Section */
.about-pawfinder-section {
    background-color: #e0f7fa; /* Light blue */
    padding: 50px 0;
    text-align: center;
    border-radius: 15px;
    margin-bottom: 40px;
}

.about-content {
    max-width: 800px;
    margin: 0 auto;
}

.about-icon {
    height: 50px;
    width: auto;
    margin-bottom: 20px;
}

.about-content p {
    font-size: 1.1em;
    color: #444;
}

/* Authentication Forms */
.auth-section {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 50px 0;
}

.auth-box {
    background-color: white;
    padding: 40px;
    border-radius: 15px;
    box-shadow: 0 8px 25px rgba(0,0,0,0.15);
    width: 100%;
    max-width: 450px;
    text-align: center;
}

.auth-title {
    font-size: 2em;
    margin-bottom: 10px;
    color: #333;
}

.auth-subtitle {
    font-size: 1.1em;
    color: #666;
    margin-bottom: 30px;
}

.form-group {
    margin-bottom: 20px;
    text-align: left;
}

.form-group label {
    display: block;
    margin-bottom: 8px;
    font-weight: bold;
    color: #555;
}

.form-group input[type="text"],
.form-group input[type="email"],
.form-group input[type="password"],
.form-group input[type="number"],
.form-group input[type="tel"] {
    width: 100%;
    padding: 12px 15px;
    border: 1px solid #ccc;
    border-radius: 8px;
    font-size: 1em;
    outline: none;
    transition: border-color 0.3s ease;
}

.form-group input:focus {
    border-color: #7d3cff;
}

.password-rules {
    display: block;
    font-size: 0.8em;
    color: #888;
    margin-top: 5px;
}

.auth-switch {
    margin-top: 25px;
    font-size: 0.95em;
}

.auth-switch a {
    margin-left: 5px;
    color: #7d3cff;
    text-decoration: none;
    font-weight: bold;
}

.auth-switch a:hover {
    text-decoration: underline;
}

/* Alerts */
.alert {
    padding: 15px;
    margin-bottom: 20px;
    border-radius: 8px;
    font-size: 0.9em;
}

.alert-danger {
    background-color: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
}

/* Footer */
.site-footer {
    background-color: #333;
    color: white;
    padding: 30px 0;
    text-align: center;
    margin-top: 40px; /* Space above footer */
}

.site-footer .container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap; /* Allow items to wrap on smaller screens */
}

.site-footer p {
    margin-bottom: 10px; /* Space for wrapped items */
}

.social-links img {
    height: 24px;
    width: auto;
    margin-left: 15px;
    opacity: 0.7;
    transition: opacity 0.3s ease;
}

.social-links img:hover {
    opacity: 1;
}

/* Responsive Adjustments */
@media (max-width: 768px) {
    .site-header .container, .site-footer .container {
        flex-direction: column;
        text-align: center;
    }
    .site-header nav ul {
        flex-direction: column;
        margin-top: 15px;
    }
    .site-header nav li {
        margin: 5px 0;
    }
    .logo {
        margin-bottom: 15px;
    }
    .hero-section {
        flex-direction: column;
        text-align: center;
    }
    .hero-content {
        padding-right: 0;
        margin-bottom: 30px;
    }
    .hero-image img {
        max-width: 80%;
        height: 250px;
    }
    .pet-grid {
        grid-template-columns: 1fr; /* Stack cards on smaller screens */
    }
    .auth-box {
        max-width: 90%;
        padding: 30px;
    }
    .social-links {
        margin-top: 15px;
    }
}


================================================================================
File: .\static\js\script.js
================================================================================




================================================================================
File: .\users\admin.py
================================================================================

from django.contrib import admin

# Register your models here.



================================================================================
File: .\users\apps.py
================================================================================

from django.apps import AppConfig


class UsersConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'users'



================================================================================
File: .\users\models.py
================================================================================

from django.db import models
from django.contrib.auth.models import User

# This model extends Django's User to add the 'role' field.
class Profile(models.Model):
    ROLE_CHOICES = (('admin', 'Admin'), ('user', 'User'))
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    role = models.CharField(max_length=10, choices=ROLE_CHOICES, default='user')
    age = models.PositiveIntegerField(null=True, blank=True)
    city = models.CharField(max_length=100, null=True, blank=True)
    phone_number = models.CharField(max_length=20, null=True, blank=True)
    profile_picture = models.ImageField(default='profile_pics/default.png', upload_to='profile_pics/', null=True, blank=True)
    def __str__(self): return f"{self.user.username} Profile"

# This table handles both LOST and FOUND pet "incidents".
class PetReport(models.Model):
    REPORT_TYPE_CHOICES = (('Lost', 'I lost my pet'), ('Found', 'I found a pet'))
    STATUS_CHOICES = (('Open', 'Open'), ('Closed', 'Closed'))
    report_type = models.CharField(max_length=10, choices=REPORT_TYPE_CHOICES)
    reporter = models.ForeignKey(User, on_delete=models.CASCADE, related_name='pet_reports')
    pet_type = models.CharField(max_length=50, help_text="e.g., Dog, Cat, Bird")
    breed = models.CharField(max_length=100, blank=True, null=True)
    color = models.CharField(max_length=50)
    pet_image = models.ImageField(upload_to='pet_images/')
    location = models.CharField(max_length=255, help_text="Area where the pet was lost or found.")
    contact_info = models.CharField(max_length=255, help_text="Your phone or email for contact.")
    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='Open')
    date_reported = models.DateTimeField(auto_now_add=True)
    def __str__(self): return f"{self.get_report_type_display()}: {self.pet_type} by {self.reporter.username}"

# This separate table is a catalog for pets available for ADOPTION.
class PetForAdoption(models.Model):
    GENDER_CHOICES = (('Male', 'Male'), ('Female', 'Female'), ('Unknown', 'Unknown'))
    ADOPTION_STATUS_CHOICES = (('Available', 'Available'), ('Pending', 'Adoption Pending'), ('Adopted', 'Adopted'))
    name = models.CharField(max_length=100)
    age = models.PositiveIntegerField(help_text="Age in years.")
    gender = models.CharField(max_length=10, choices=GENDER_CHOICES, default='Unknown')
    pet_type = models.CharField(max_length=50)
    breed = models.CharField(max_length=100, blank=True, null=True)
    color = models.CharField(max_length=50)
    image = models.ImageField(upload_to='adoption_images/')
    description = models.TextField(help_text="Describe the pet's personality, story, and needs.")
    lister = models.ForeignKey(User, on_delete=models.CASCADE, related_name='adoption_listings')
    status = models.CharField(max_length=10, choices=ADOPTION_STATUS_CHOICES, default='Available')
    date_listed = models.DateTimeField(auto_now_add=True)
    def __str__(self): return f"{self.name} ({self.pet_type}) - {self.get_status_display()}"

# This table handles notifications from the system/admins to users.
class Notification(models.Model):
    recipient = models.ForeignKey(User, on_delete=models.CASCADE, related_name='notifications')
    pet_report = models.ForeignKey(PetReport, on_delete=models.CASCADE, null=True, blank=True)
    message = models.TextField()
    is_read = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)
    def __str__(self): return f"Notification for {self.recipient.username}: {self.message[:30]}..."


================================================================================
File: .\users\serializers.py
================================================================================

from rest_framework import serializers
from .models import Profile, PetReport, PetForAdoption, Notification
from django.contrib.auth.models import User

class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ['id', 'username', 'first_name', 'last_name', 'email']

class ProfileSerializer(serializers.ModelSerializer):
    user = UserSerializer(read_only=True)
    class Meta:
        model = Profile
        fields = '__all__'

class PetReportSerializer(serializers.ModelSerializer):
    reporter = UserSerializer(read_only=True)
    class Meta:
        model = PetReport
        fields = '__all__'

class PetForAdoptionSerializer(serializers.ModelSerializer):
    class Meta:
        model = PetForAdoption
        fields = '__all__'

class NotificationSerializer(serializers.ModelSerializer):
    class Meta:
        model = Notification
        fields = '__all__'


================================================================================
File: .\users\tests.py
================================================================================

from django.test import TestCase

# Create your tests here.



================================================================================
File: .\users\urls.py
================================================================================

# users/urls.py
from django.urls import path
from .views import (
    # Removed home_view from here, it's no longer the main root
    login_view, logout_view, register_view,
    pets_list_view, pet_detail_view, about_view, contact_view
)

app_name = 'users' # This is essential

urlpatterns = [
    # --- HTML Rendering URLs ---
    # LOGIN is now the root for the users app, which will be mapped to the project root.
    path('', login_view, name='login'), # <-- MODIFIED: login is now the root for this app.
    # Removed the old path('', home_view, name='home'),
    path('logout/', logout_view, name='logout'),
    path('register/', register_view, name='register'),
    path('pets/', pets_list_view, name='pets_list'),
    path('pets/<int:pet_id>/', pet_detail_view, name='pet_detail'),
    path('about/', about_view, name='about'),
    path('contact/', contact_view, name='contact'),
]


================================================================================
File: .\users\views.py
================================================================================

# users/views.py
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth import authenticate, login as auth_login, logout as auth_logout
from django.contrib.auth.decorators import login_required
from django.contrib.auth.models import User
from django import forms
from django.urls import reverse # Import reverse for url naming

from .models import Profile, PetReport, PetForAdoption, Notification
from .serializers import ProfileSerializer, PetReportSerializer, PetForAdoptionSerializer, NotificationSerializer, UserSerializer
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import viewsets, status
from rest_framework.permissions import AllowAny, IsAuthenticated, IsAdminUser

# --- API ViewSets ---
class ProfileViewSet(viewsets.ModelViewSet):
    queryset = Profile.objects.all()
    serializer_class = ProfileSerializer
    # permission_classes = [IsAuthenticated]

class PetReportViewSet(viewsets.ModelViewSet):
    queryset = PetReport.objects.all()
    serializer_class = PetReportSerializer
    # permission_classes = [IsAuthenticated]

class PetForAdoptionViewSet(viewsets.ModelViewSet):
    queryset = PetForAdoption.objects.all()
    serializer_class = PetForAdoptionSerializer
    # permission_classes = [IsAuthenticated]

class NotificationViewSet(viewsets.ModelViewSet):
    queryset = Notification.objects.all()
    serializer_class = NotificationSerializer
    # permission_classes = [IsAuthenticated]

# --- API View for Registration ---
class RegisterView(APIView):
    permission_classes = [AllowAny]
    def post(self, request):
        username = request.data.get('username')
        email = request.data.get('email')
        password = request.data.get('password')

        if not username or not password or not email:
            return Response({'error': 'Username, email, and password are required.'}, status=status.HTTP_400_BAD_REQUEST)
        if User.objects.filter(username=username).exists():
            return Response({'error': 'Username already exists.'}, status=status.HTTP_400_BAD_REQUEST)
        if User.objects.filter(email=email).exists():
            return Response({'error': 'Email already exists.'}, status=status.HTTP_400_BAD_REQUEST)

        user = User.objects.create_user(username=username, email=email, password=password)
        Profile.objects.create(user=user)
        return Response(UserSerializer(user).data, status=status.HTTP_201_CREATED)


# --- HTML Rendering Views ---

# Removed home_view as it's no longer the root of the project.
# The login_view will now be rendered by the root URL.

# Login View
def login_view(request):
    if request.method == 'POST':
        form_username = request.POST.get('username')
        form_password = request.POST.get('password')

        user = authenticate(request, username=form_username, password=form_password)

        if user is not None:
            auth_login(request, user)
            # Redirect to a protected page or a dashboard after login, NOT home (as home is gone)
            return redirect('users:pets_list') # Redirect to pets list for example
        else:
            # Authentication failed
            return render(request, 'users/login.html', {'error_message': "Invalid username or password."})
    else:
        # GET request: show the login form
        return render(request, 'users/login.html')

# Logout View
def logout_view(request):
    auth_logout(request)
    return redirect('users:login') # Redirect to login after logout

# Registration Form
class RegistrationForm(forms.Form):
    username = forms.CharField(max_length=150, required=True, widget=forms.TextInput(attrs={'id': 'id_username', 'class': 'form-input'}))
    email = forms.EmailField(required=True, widget=forms.EmailInput(attrs={'id': 'id_email', 'class': 'form-input'}))
    first_name = forms.CharField(max_length=100, required=False, widget=forms.TextInput(attrs={'id': 'id_first_name', 'class': 'form-input'}))
    age = forms.IntegerField(min_value=0, required=False, widget=forms.NumberInput(attrs={'id': 'id_age', 'class': 'form-input'}))
    city = forms.CharField(max_length=100, required=False, widget=forms.TextInput(attrs={'id': 'id_city', 'class': 'form-input'}))
    phone_number = forms.CharField(max_length=20, required=False, widget=forms.TextInput(attrs={'id': 'id_phone_number', 'class': 'form-input'}))
    password = forms.CharField(widget=forms.PasswordInput(attrs={'id': 'id_password1', 'class': 'form-input'}))
    password2 = forms.CharField(widget=forms.PasswordInput(attrs={'id': 'id_password2', 'class': 'form-input'}), label="Confirm Password")

    def clean_password(self):
        password = self.cleaned_data.get("password")
        if password:
            if len(password) < 8: raise forms.ValidationError("Password must contain at least 8 characters.")
            if not any(c.islower() for c in password): raise forms.ValidationError("Password must contain at least one lowercase letter.")
            if not any(c.isupper() for c in password): raise forms.ValidationError("Password must contain at least one uppercase letter.")
            if not any(c.isdigit() for c in password): raise forms.ValidationError("Password must contain at least one number.")
            if not any(not c.isalnum() for c in password): raise forms.ValidationError("Password must contain at least one special character.")
        return password

    def clean_password2(self):
        password = self.cleaned_data.get("password")
        password2 = self.cleaned_data.get("password2")
        if password and password2 and password != password2:
            raise forms.ValidationError("Passwords do not match.")
        return password

    def clean_username(self):
        username = self.cleaned_data.get('username')
        if User.objects.filter(username=username).exists():
            raise forms.ValidationError("Username already exists.")
        return username

    def clean_email(self):
        email = self.cleaned_data.get('email')
        if User.objects.filter(email=email).exists():
            raise forms.ValidationError("Email already exists.")
        return email

# Registration View
def register_view(request):
    if request.method == 'POST':
        form = RegistrationForm(request.POST)
        if form.is_valid():
            user = User.objects.create_user(
                username=form.cleaned_data['username'],
                email=form.cleaned_data['email'],
                password=form.cleaned_data['password'],
                first_name=form.cleaned_data.get('first_name', ''),
            )
            Profile.objects.create(
                user=user,
                age=form.cleaned_data.get('age'),
                city=form.cleaned_data.get('city'),
                phone_number=form.cleaned_data.get('phone_number')
            )
            auth_login(request, user)
            # Redirect to the pets list page after successful registration and login
            return redirect('users:pets_list') # <-- MODIFIED: Redirect to pets list
    else:
        form = RegistrationForm()
    return render(request, 'users/register.html', {'form': form})

# Placeholder View for Pets List
def pets_list_view(request):
    all_pets = PetForAdoption.objects.filter(status='Available')
    context = {
        'pets': all_pets
    }
    return render(request, 'users/pets_list.html', context)

# Placeholder View for Pet Detail
def pet_detail_view(request, pet_id):
    pet = get_object_or_404(PetForAdoption, pk=pet_id)
    context = {
        'pet': pet
    }
    return render(request, 'users/pet_detail.html', context)

# Placeholder View for About Page
def about_view(request):
    return render(request, 'users/about.html')

# Placeholder View for Contact Page
def contact_view(request):
    return render(request, 'users/contact.html')

# Example of a protected view (requires login)
@login_required
def dashboard_view(request):
    try:
        user_profile = request.user.profile
    except Profile.DoesNotExist:
        user_profile = None
    user_reports = request.user.pet_reports.all()
    context = {
        'profile': user_profile,
        'reports': user_reports
    }
    return render(request, 'users/dashboard.html', context)


================================================================================
File: .\users\__init__.py
================================================================================




================================================================================
File: .\users\migrations\0001_initial.py
================================================================================

# Generated by Django 4.2 on 2025-09-22 18:53

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('user', 'User')], default='user', max_length=10)),
                ('profile_picture', models.ImageField(blank=True, default='profile_pics/default.png', null=True, upload_to='profile_pics/')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PetReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_type', models.CharField(choices=[('Lost', 'I lost my pet'), ('Found', 'I found a pet')], max_length=10)),
                ('pet_type', models.CharField(help_text='e.g., Dog, Cat, Bird', max_length=50)),
                ('breed', models.CharField(blank=True, max_length=100, null=True)),
                ('color', models.CharField(max_length=50)),
                ('pet_image', models.ImageField(upload_to='pet_images/')),
                ('location', models.CharField(help_text='Area where the pet was lost or found.', max_length=255)),
                ('contact_info', models.CharField(help_text='Your phone or email for contact.', max_length=255)),
                ('status', models.CharField(choices=[('Open', 'Open'), ('Closed', 'Closed')], default='Open', max_length=10)),
                ('date_reported', models.DateTimeField(auto_now_add=True)),
                ('reporter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pet_reports', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PetForAdoption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('age', models.PositiveIntegerField(help_text='Age in years.')),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female'), ('Unknown', 'Unknown')], default='Unknown', max_length=10)),
                ('pet_type', models.CharField(max_length=50)),
                ('breed', models.CharField(blank=True, max_length=100, null=True)),
                ('color', models.CharField(max_length=50)),
                ('image', models.ImageField(upload_to='adoption_images/')),
                ('description', models.TextField(help_text="Describe the pet's personality, story, and needs.")),
                ('adoption_fee', models.DecimalField(decimal_places=2, default=0.0, max_digits=7)),
                ('status', models.CharField(choices=[('Available', 'Available'), ('Pending', 'Adoption Pending'), ('Adopted', 'Adopted')], default='Available', max_length=10)),
                ('date_listed', models.DateTimeField(auto_now_add=True)),
                ('lister', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='adoption_listings', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]



================================================================================
File: .\users\migrations\0002_remove_petforadoption_adoption_fee.py
================================================================================

# Generated by Django 4.2 on 2025-09-22 19:02

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='petforadoption',
            name='adoption_fee',
        ),
    ]



================================================================================
File: .\users\migrations\0003_notification.py
================================================================================

# Generated by Django 4.2 on 2025-09-22 19:06

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('users', '0002_remove_petforadoption_adoption_fee'),
    ]

    operations = [
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('pet_report', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='users.petreport')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]



================================================================================
File: .\users\migrations\0004_profile_age_profile_city_profile_phone_number.py
================================================================================

# Generated by Django 4.2 on 2025-09-23 19:22

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0003_notification'),
    ]

    operations = [
        migrations.AddField(
            model_name='profile',
            name='age',
            field=models.PositiveIntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='profile',
            name='city',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='profile',
            name='phone_number',
            field=models.CharField(blank=True, max_length=20, null=True),
        ),
    ]



================================================================================
File: .\users\migrations\__init__.py
================================================================================




================================================================================
File: .\users\templates\users\base.html
================================================================================

{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}PawFinder - Find Your Furry Friend!{% endblock %}</title>
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
    <link href="https://fonts.googleapis.com/css2?family=Pacifico&family=Quicksand:wght@400;700&display=swap" rel="stylesheet">
</head>
<body>
    <header class="site-header">
        <div class="container">
            <div class="logo">
                <img src="{% static 'images/paw-logo.png' %}" alt="PawFinder Logo" class="logo-img">
                <h1 class="site-title">PawFinder</h1>
            </div>
            <nav>
                <ul>
                    
                </ul>
            </nav>
        </div>
    </header>

    <main class="container">
        {% block content %}
        {% endblock %}
    </main>

    <footer class="site-footer">
        <div class="container">
            <p>&copy; {% now "Y" %} PawFinder. All rights reserved.</p>
            <div class="social-links">
                <a href="#"><img src="{% static 'images/facebook-icon.png' %}" alt="Facebook"></a>
                <a href="#"><img src="{% static 'images/twitter-icon.png' %}" alt="Twitter"></a>
                <a href="#"><img src="{% static 'images/instagram-icon.png' %}" alt="Instagram"></a>
            </div>
        </div>
    </footer>

    <script src="{% static 'js/script.js' %}"></script>
    {% block scripts %}
    {% endblock %}
</body>
</html>


================================================================================
File: .\users\templates\users\home.html
================================================================================

{% extends 'users/base.html' %}
{% load static %}

{% block title %}Welcome to PawFinder!{% endblock %}

{% block content %}
<section class="hero-section">
    <div class="hero-content">
        <h2>Find your perfect furry companion!</h2>
        <p>Connecting loving homes with adorable pets in need.</p>
        <div class="hero-actions">
            <a href="{% url 'users:pets_list' %}" class="btn btn-primary">Discover Pets</a> {# Corrected namespace #}
            <a href="{% url 'users:register' %}" class="btn btn-secondary">Join Our Community</a> {# Corrected namespace #}
        </div>
    </div>
    <div class="hero-image">
        <img src="{% static 'images/hero-pet.jpg' %}" alt="Cute Dog and Cat">
    </div>
</section>

<section class="featured-pets-section">
    <h2 class="section-title">Featured Pets Ready for Adoption</h2>
    <div class="pet-grid">
        {% for pet in featured_pets %}
            <div class="pet-card">
                {# Ensure the image URL is correctly accessed. Assuming `pet.image` is the ImageField #}
                <img src="{{ pet.image.url }}" alt="{{ pet.name }}" class="pet-card-img">
                <div class="pet-card-info">
                    <h3>{{ pet.name }}</h3>
                    <p><strong>Type:</strong> {{ pet.pet_type }}</p>
                    <p><strong>Breed:</strong> {{ pet.breed|default:"N/A" }}</p> {# Added default for clarity #}
                    <p><strong>Age:</strong> {{ pet.age }} years</p>
                    <a href="{% url 'users:pet_detail' pet.id %}" class="btn btn-small">View Details</a> {# Corrected namespace and added pet.id #}
                </div>
            </div>
        {% empty %}
            <p>No pets available for adoption right now. Check back soon!</p>
        {% endfor %}
    </div>
</section>

<section class="about-pawfinder-section">
    <h2 class="section-title">About PawFinder</h2>
    <div class="about-content">
        <img src="{% static 'images/paw-print-icon.png' %}" alt="Paw Print Icon" class="about-icon">
        <p>PawFinder is dedicated to making adoption easier and more accessible for everyone. We believe every pet deserves a loving home, and we're here to help you find your perfect match.</p>
    </div>
</section>
{% endblock %}


================================================================================
File: .\users\templates\users\login.html
================================================================================

{% extends 'users/base.html' %}
{% load static %}

{% block title %}Login to PawFinder{% endblock %}

{% block content %}
<section class="auth-section">
    <div class="auth-box">
        <h2 class="auth-title">Hello!</h2>
        <p class="auth-subtitle">Login to your PawFinder account.</p>

        {# Action correctly points to the login URL #}
        <form method="post" action="{% url 'users:login' %}"> {# Corrected namespace #}
            {% csrf_token %}

            {% if error_message %}
                <div class="alert alert-danger">
                    <p>{{ error_message }}</p>
                </div>
            {% endif %}

            <div class="form-group">
                <label for="username">Username or Email:</label>
                <input type="text" id="username" name="username" required>
            </div>
            <div class="form-group">
                <label for="password">Password:</label>
                <input type="password" id="password" name="password" required>
            </div>

            <button type="submit" class="btn btn-primary btn-full">Login</button>
        </form>

        <div class="auth-switch">
            <p>New user? <a href="{% url 'users:register' %}" class="btn btn-secondary btn-small">Register Here</a></p> {# Corrected namespace #}
        </div>
    </div>
</section>
{% endblock %}


================================================================================
File: .\users\templates\users\register.html
================================================================================

{% extends 'users/base.html' %}
{% load static %}

{% block title %}Register with PawFinder{% endblock %}

{% block content %}
<section class="auth-section">
    <div class="auth-box">
        <h2 class="auth-title">Create Your PawFinder Account</h2>
        <p class="auth-subtitle">Join our community to help pets find homes!</p>

        {# Action correctly points to the register URL #}
        <form id="registrationForm" method="post" action="{% url 'users:register' %}"> {# Corrected namespace #}
            {% csrf_token %}

            {# Display form errors here if any #}
            {% if form.errors %}
                <div class="alert alert-danger">
                    {% for field in form %}
                        {% for error in field.errors %}
                            <p><strong>{{ field.label }}:</strong> {{ error }}</p>
                        {% endfor %}
                    {% endfor %}
                    {% for error in form.non_field_errors %}
                        <p><strong>Error:</strong> {{ error }}</p>
                    {% endfor %}
                </div>
            {% endif %}

            {# Added value attributes to retain user input on validation error #}
            <div class="form-group">
                <label for="id_username">Username:</label>
                <input type="text" id="id_username" name="username" value="{{ form.username.value|default:'' }}" required>
            </div>
            <div class="form-group">
                <label for="id_email">Email:</label>
                <input type="email" id="id_email" name="email" value="{{ form.email.value|default:'' }}" required>
            </div>
            <div class="form-group">
                <label for="id_first_name">Full Name:</label>
                <input type="text" id="id_first_name" name="first_name" value="{{ form.first_name.value|default:'' }}">
            </div>
            <div class="form-group">
                <label for="id_age">Age:</label>
                <input type="number" id="id_age" name="age" min="0" value="{{ form.age.value|default:'' }}">
            </div>
            <div class="form-group">
                <label for="id_city">City:</label>
                <input type="text" id="id_city" name="city" value="{{ form.city.value|default:'' }}">
            </div>
            <div class="form-group">
                <label for="id_phone_number">Phone Number:</label>
                <input type="tel" id="id_phone_number" name="phone_number" value="{{ form.phone_number.value|default:'' }}">
            </div>
            <div class="form-group">
                <label for="id_password1">Password:</label>
                <input type="password" id="id_password1" name="password" required>
                <small class="password-rules">Min 8 chars, 1 uppercase, 1 lowercase, 1 number, 1 special char.</small>
            </div>
            <div class="form-group">
                <label for="id_password2">Confirm Password:</label>
                <input type="password" id="id_password2" name="password2" required>
            </div>

            <button type="submit" class="btn btn-primary btn-full">Register</button>
        </form>

        <div class="auth-switch">
            <p>Already have an account? <a href="{% url 'users:login' %}" class="btn btn-secondary btn-small">Login Here</a></p> {# Corrected namespace #}
        </div>
    </div>
</section>
{% endblock %}

